# Generated by Django 5.2.4 on 2025-08-29 08:54

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], default='present', max_length=10)),
                ('time_in', models.TimeField(blank=True, null=True)),
                ('time_out', models.TimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about attendance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('age_range', models.CharField(help_text="e.g., '2-3 years'", max_length=20)),
                ('is_toddler_class', models.BooleanField(default=False, help_text='Special reports for toddler classes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('general_notes', models.TextField(help_text="General observations about the student's day")),
                ('mood_behavior', models.CharField(help_text="Student's mood and behavior", max_length=200)),
                ('social_interaction', models.TextField(blank=True, help_text='How student interacted with peers')),
                ('potty_activities', models.TextField(blank=True, help_text='Potty training updates (for toddler classes)')),
                ('meal_notes', models.TextField(blank=True, help_text='Eating habits and meal notes')),
                ('nap_time', models.CharField(blank=True, help_text='Nap time details', max_length=100)),
                ('diaper_changes', models.IntegerField(blank=True, help_text='Number of diaper changes', null=True)),
                ('homework_completed', models.BooleanField(default=False)),
                ('homework_notes', models.TextField(blank=True)),
                ('parent_message', models.TextField(blank=True, help_text='Specific message for parents')),
                ('requires_parent_action', models.BooleanField(default=False)),
                ('parent_action_required', models.TextField(blank=True, help_text='What action parent needs to take')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sent_to_parent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailySubjectReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topics_covered', models.JSONField(default=list, help_text='List of topics/subtopics covered')),
                ('learning_objectives', models.TextField(help_text='What the student was expected to learn')),
                ('rubric_rating', models.CharField(choices=[('introduced', 'Introduced'), ('working', 'Working'), ('mastered', 'Mastered'), ('not_applicable', 'Not Applicable')], default='introduced', max_length=20)),
                ('performance_notes', models.TextField(help_text="Specific notes about student's performance in this subject")),
                ('activities_completed', models.JSONField(default=list, help_text='List of activities completed')),
                ('engagement_level', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('not_engaged', 'Not Engaged')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('class_levels', models.JSONField(default=list, help_text='List of class levels this subject is offered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TermReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='e.g., 2024-2025', max_length=20)),
                ('term', models.CharField(choices=[('first', 'First Term'), ('second', 'Second Term'), ('third', 'Third Term')], max_length=10)),
                ('total_school_days', models.IntegerField()),
                ('days_present', models.IntegerField()),
                ('days_absent', models.IntegerField()),
                ('days_late', models.IntegerField()),
                ('attendance_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('overall_grade', models.CharField(blank=True, choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('F', 'F')], max_length=2)),
                ('behavior_rating', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement')], max_length=20)),
                ('teacher_comment', models.TextField(help_text="Teacher's overall comment for the term")),
                ('principal_comment', models.TextField(blank=True, help_text="Principal's comment")),
                ('strengths', models.TextField(help_text="Student's key strengths")),
                ('areas_for_improvement', models.TextField(help_text='Areas that need improvement')),
                ('recommendations', models.TextField(help_text='Recommendations for next term')),
                ('promoted_to_next_level', models.BooleanField(default=True)),
                ('promotion_notes', models.TextField(blank=True, help_text='Notes about promotion decision')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finalized', models.BooleanField(default=False)),
                ('finalized_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TermSubjectReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_score', models.DecimalField(decimal_places=2, help_text='Exam score out of 100', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('continuous_assessment', models.DecimalField(decimal_places=2, help_text='Continuous assessment score out of 100', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('class_participation', models.DecimalField(decimal_places=2, help_text='Class participation score out of 100', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_score', models.DecimalField(decimal_places=2, editable=False, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade', models.CharField(choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('F', 'F')], editable=False, max_length=2)),
                ('overall_rubric', models.CharField(choices=[('introduced', 'Introduced'), ('working', 'Working'), ('mastered', 'Mastered'), ('not_applicable', 'Not Applicable')], max_length=20)),
                ('subject_comment', models.TextField(help_text="Teacher's comment on subject performance")),
                ('key_topics_mastered', models.JSONField(default=list, help_text='List of topics student mastered')),
                ('topics_needing_work', models.JSONField(default=list, help_text='List of topics needing more work')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start_date', models.DateField()),
                ('week_end_date', models.DateField()),
                ('weekly_summary', models.TextField(help_text='Overall summary of the week')),
                ('strengths', models.TextField(help_text="Student's strengths observed this week")),
                ('areas_for_improvement', models.TextField(help_text='Areas that need attention')),
                ('behavioral_summary', models.TextField(help_text='Summary of behavior patterns')),
                ('academic_highlights', models.TextField(help_text='Key academic achievements')),
                ('homework_completion_rate', models.IntegerField(default=0, help_text='Percentage of homework completed', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('days_present', models.IntegerField(default=0)),
                ('days_absent', models.IntegerField(default=0)),
                ('days_late', models.IntegerField(default=0)),
                ('home_support_suggestions', models.TextField(blank=True, help_text='Suggestions for parents to support at home')),
                ('next_week_focus', models.TextField(help_text='What to focus on next week')),
                ('additional_notes', models.TextField(blank=True, help_text='Any additional updates for parents')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklySubjectSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topics_covered', models.JSONField(default=list, help_text='Topics covered during the week')),
                ('overall_rubric_rating', models.CharField(choices=[('introduced', 'Introduced'), ('working', 'Working'), ('mastered', 'Mastered'), ('not_applicable', 'Not Applicable')], max_length=20)),
                ('progress_notes', models.TextField(help_text='Progress in this subject during the week')),
                ('improvement_areas', models.TextField(blank=True, help_text='Areas needing improvement in this subject')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
